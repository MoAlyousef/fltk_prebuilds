name: rustbuild
on: [push, pull_request]

jobs:
  build-msys-mingw64:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-cc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-rust --needed
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-windows-msys-gnu
          path: target/release/build/**/out/lib
  build-msys-mingw32:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          update: true
          install: git mingw-w64-i686-cc mingw-w64-i686-cmake mingw-w64-i686-ninja mingw-w64-i686-rust --needed
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x86-windows-msys-gnu
          path: target/release/build/**/out/lib
  build-mingw64:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-gnu
          default: true
      - name: CI-Build
        run: cargo build --release
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-windows-gnu
          path: target/release/build/**/out/lib
  build-msvc32:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-msvc
          target: i686-pc-windows-msvc
          default: true
      - name: CI-Build
        run: cargo build --release --target=i686-pc-windows-msvc
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x86-windows-msvc
          path: target/i686-pc-windows-msvc/release/build/**/out/lib
  build-macos-arm64:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: aarch64-apple-darwin
          toolchain: stable
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja --target=aarch64-apple-darwin
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_arm64-macos
          path: target/aarch64-apple-darwin/release/build/**/out/lib
  build-macos-x64:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-macos
          path: target/release/build/**/out/lib
  build-msvc:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-msvc
          default: true
      - name: CI-Build
        run: cargo build --release
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-windows-msvc
          path: target/release/build/**/out/lib
  build-linux-x64:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Download deps
        run: sudo apt-get update && sudo apt-get install -y libpango1.0-dev libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpng-dev
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-linux
          path: target/release/build/**/out/lib
  build-msvc-arm64:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-msvc
          target: aarch64-pc-windows-msvc
          default: true
      - name: CI-Build
        run: cargo build --release --target=aarch64-pc-windows-msvc
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_arm64-windows-msvc
          path: target/aarch64-pc-windows-msvc/release/build/**/out/lib
  build-linux-arm64:
    runs-on: ubuntu-latest
    env:
      CC: aarch64-linux-gnu-gcc
      CXX: aarch64-linux-gnu-g++
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      PKG_CONFIG_PATH: "/usr/lib/aarch64-linux-gnu/pkgconfig/:${PKG_CONFIG_PATH}"
    steps:
    - name: Fix GitHub's mess
      run: |
          sudo rm -f /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update -qq
          sudo apt-get install -yqq --allow-downgrades libgd3/focal libpcre2-8-0/focal libpcre2-16-0/focal libpcre2-32-0/focal libpcre2-posix2/focal
          sudo apt-get purge -yqq libclang* libgbm* libllvm* libmono* moby* mono* php* libgdiplus libpcre2-posix3 libzip4
    - name: Download deps
      run: |
          sudo dpkg --add-architecture arm64
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ $(lsb_release -c -s) main restricted universe multiverse" | sudo tee /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ $(lsb_release -c -s)-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ $(lsb_release -c -s)-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ $(lsb_release -c -s)-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -c -s) main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -c -s)-security main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -c -s)-backports main multiverse universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ $(lsb_release -c -s)-updates main multiverse universe" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update -y
          sudo apt-get install -y libpango1.0-dev:arm64 libx11-dev:arm64 libxext-dev:arm64 libxft-dev:arm64 libxinerama-dev:arm64 libxcursor-dev:arm64 libxrender-dev:arm64 libxfixes-dev:arm64 libpng-dev:arm64 libasound2-dev:arm64
          sudo apt-get install g++-aarch64-linux-gnu
      shell: bash
    - uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          override: true
          profile: minimal
    - name: Build
      shell: bash
      run: cargo build --target=aarch64-unknown-linux-gnu --release
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: lib_arm64-linux
        path: target/aarch64-unknown-linux-gnu/release/build/**/out/lib
