name: rustbuild
on: [push, pull_request]

jobs:
  build-msys-mingw:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-cc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja mingw-w64-x86_64-rust --needed
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-windows-msys-gnu
          path: target/release/build/**/out/lib
  build-mingw:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-gnu
          default: true
      - name: CI-Build
        run: cargo build --release
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-windows-gnu
          path: target/release/build/**/out/lib
  build-msvc32:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-msvc
          target: i686-pc-windows-msvc
          default: true
      - name: CI-Build
        run: cargo build --release --target=i686-pc-windows-msvc
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x86-windows-msvc
          path: target/i686-pc-windows-msvc/release/build/**/out/lib
  build-macos-arm64:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: aarch64-apple-darwin
          toolchain: stable
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja --target=aarch64-apple-darwin
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_arm64-macos
          path: target/aarch64-apple-darwin/release/build/**/out/lib
  build-macos-x64:
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-macos
          path: target/release/build/**/out/lib
  build-msvc:
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-msvc
          default: true
      - name: CI-Build
        run: cargo build --release
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-windows-msvc
          path: target/release/build/**/out/lib
  build-linux-x64:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - name: Download deps
        run: sudo apt-get update && sudo apt-get install -y libpango1.0-dev libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpng-dev
      - name: CI-Build
        run: cargo build --release --features=fltk-sys/use-ninja
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_x64-linux
          path: target/release/build/**/out/lib
  build-linux-aarch64:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2
        name: Run commands
        id: runcmd
        with:
          arch: aarch64
          distro: ubuntu_latest
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/artifacts"
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"
          run: |
            apt-get update 
            apt-get install --assume-yes --no-install-recommends file ninja-build g++ cmake git rustc cargo libpango1.0-dev libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev ca-certificates
            update-ca-certificates --fresh
            export SSL_CERT_DIR=/etc/ssl/certs
            cargo build --release --features=fltk-sys/use-ninja
            file ./target/release/dock
            cp -r ./target/release/build/**/out/lib "/artifacts/"
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: lib_arm64-linux
          path: artifacts
